@page "/products/create"
@page "/products/edit/{ProductId:int}"
@using Client.Services
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject NavigationManager Navigation

<h3>@(ProductId == 0 ? "Create Product" : "Edit Product")</h3>

<EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Name:</label>
        <InputText class="form-control" @bind-Value="product.Name" />
    </div>

    <div class="mb-3">
        <label>Description:</label>
        <InputText class="form-control" @bind-Value="product.Description" />
    </div>

    <div class="mb-3">
        <label>Price:</label>
        <InputNumber class="form-control" @bind-Value="product.Price" />
    </div>

    <div class="mb-3">
        <label>Stock:</label>
        <InputNumber class="form-control" @bind-Value="product.Stock" />
    </div>

    <div class="mb-3">
        <label>Category:</label>
        <InputSelect class="form-control" @bind-Value="product.CategoryId">
            <option value="">-- Select Category --</option>
            @foreach (var cat in categories)
            {
                <option value="@cat.CategoryId">@cat.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public int ProductId { get; set; }
    private Product product = new();
    private List<Category> categories = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategoriesAsync();

        if (ProductId != 0)
        {
            var existingProduct = await ProductService.GetProductAsync(ProductId);
            if (existingProduct != null)
            {
                product = existingProduct;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (ProductId == 0)
            await ProductService.CreateProductAsync(product);
        else
            await ProductService.UpdateProductAsync(product);

        Navigation.NavigateTo("/products");
    }

    void Cancel() => Navigation.NavigateTo("/products");
}
