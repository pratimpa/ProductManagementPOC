@page "/products"
@using Client.Models
@using Client.Services
@inject ProductService ProductService
@inject NavigationManager Navigation

<h3>Product List</h3>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (products == null || products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="Create">Add New Product</button>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Category?.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Stock</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="@(() => Edit(product.ProductId))">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => Delete(product.ProductId))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between mt-3">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <span>Page @_currentPage</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(_productsFetched < _pageSize)">Next</button>
    </div>
}

@code {
    private List<Product>? products;
    private bool isLoading = true;
    private string? errorMessage;

    private int _currentPage = 1;
    private int _pageSize = 5; // You can change page size as needed
    private int _productsFetched = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            products = await ProductService.GetProductsAsync(_currentPage, _pageSize);
            _productsFetched = products?.Count ?? 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Failed to load products.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task NextPage()
    {
        _currentPage++;
        await LoadProducts();
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadProducts();
        }
    }

    void Create() => Navigation.NavigateTo("/products/create");

    void Edit(int id) => Navigation.NavigateTo($"/products/edit/{id}");

    private async Task Delete(int id)
    {
        try
        {
            await ProductService.DeleteProductAsync(id);
            await LoadProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Failed to delete product.";
        }
    }
}
