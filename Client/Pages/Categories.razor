@page "/categories"
@inject Client.Services.ICategoryService CategoryService

<h3>Categories</h3>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cat in categories)
            {
                <tr>
                    <td>@cat.Name</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditCategory(cat)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCategory(cat.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (editingCategory != null)
{
    <h4>Edit Category</h4>
    <EditForm Model="@editingCategory" OnValidSubmit="HandleEditSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="editingCategory.Name" />
        </div>
        <button type="submit" class="btn btn-success">Update</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}

@code {
    private List<Client.Models.Category> categories;
    private Client.Models.Category editingCategory;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        categories = (await CategoryService.GetCategoriesAsync()).ToList();
    }

    private void EditCategory(Client.Models.Category cat)
    {
        editingCategory = new Client.Models.Category
        {
            Id = cat.Id,
            Name = cat.Name
        };
    }

    private async Task HandleEditSubmit()
    {
        await CategoryService.UpdateCategoryAsync(editingCategory);
        editingCategory = null;
        await LoadCategoriesAsync();
    }

    private void CancelEdit()
    {
        editingCategory = null;
    }

    private async Task DeleteCategory(int id)
    {
        await CategoryService.DeleteCategoryAsync(id);
        await LoadCategoriesAsync();
    }
}
